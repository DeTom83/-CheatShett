https://www.udemy.com/course/the-complete-javascript-course

Useful pages:
-------------
https://developer.mozilla.org/en-US/docs/Learn
https://kangax.github.io/compat-table/es6/
https://github.com/jonasschmedtmann/complete-javascript-course

---------------------------------------------------------------------------------------------------------
										Fundamentals 1
---------------------------------------------------------------------------------------------------------
Futathatjuk:
	1.) fejleszt≈ëi eszk√∂z√∂k k√∂z√∂tt (console)
	2.) <script></script> - inline script
	3.) k√ºl√∂n file <script src="first.js"></script> - external file
	4.) https://codepen.io/pen/ - special enverioment

Data Types: 
------------
	(dynamic typing - nem kell el≈ëre defini√°lni a t√≠pust)
	(value has type, NOT variable!)
	Data types are determined automatically
	Value - Object or Primitive (not object)
	Primitive: number, string, boolean, NULL, Undefine, Symbol, BigInt

	Undefine - empty value -> let children;
	NULL - also means 'empty value'
	Symbol (ES2015) - unique and cannot be change (not useful for now)
	BigInt (ES2020) - large integer

	Comment
		// line comment
		/* blokk comment*/
	t√≠pus lek√©r√©se: console.log(typeof 'TimTom'); //string

	const birthYear = 1983;
	var - √∂r√∂ks√©g, a let √∫jabb √©s praktikusabb //let x; default undefine;
	
	String
	const jonas = "I'm " + firstName + ', a '+ yearsOld;
	const JonasNew = `I'm ${firstName}, a ${yearsOld}`;
	console.log('String with \n\
	multiple line');                \\ \n √°ltal√°ban new line jele
	
	Type Conversion:
		console.log(Number('1998')+18);
	
	
	
Operators:
-----------
	firstName = 'John';
	lastName = "Doe";
	console.log(firstName, lastName); //=> John Doe 

	// Math operators
	2 ** 3 //-> 2*2*2=8
	
	//Assignment operators
	x +=10; // x = x+10;
	x *=4;  // x = x*4;
	x++; x--;
	
	// Comparison operators (<, >, >=, <=)
	console.log(ageJones > ageShara); // true or false
	
	Operator precedence: 
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
	avg = ageJohn + ageSarah / 2; //false
	avg = (ageJohn + ageSarah) / 2; //good!
	
If/else Statments
------------------
	const age = 19;
	const isOldEnough = age >= 18;
	if (isOldEnough){
		console.log('He/She is adult!üéâüéÇüéÇ'); //Windows + .
	}else{
		console.log('He/She isn't adult! üò®');
	}

	Logical operators:
		&&, ||, ! - invert 
		('=' that is value add, not logical operator)
		'18' == 18 //true
		'18' === 18 //false, but 18 === 18-> true
	
	const luckyNumber = prompt("Please, give me your lucky number: ");
	
	if(luckyNumber === 23){console.log('Cool! 23 is great!');}
	else if (luckyNumber === 7) {console.log('7 is lucky number');}
	else {console.log('That is not lucky!');}
	
	if(luckyNumber !== 23) console.log('Why not the 23?');
	
Switch Statments
------------------
	switch(day){
		case 'monday' : 
			console.log('First day of the week');
			console.log('Do you like this day?');
			break;
		case 'tuesday' :
			console.log('Prepare theory videos...');
			break;
		case 'wednesday':
		case 'thursday': 
			console.log('Write code examples');
			break;
		...
		default:
			console.log('Not a valid day!');
	}
	break - addig fut az adott √°g, am√≠g breakbe, vagy defaultot nem lel.
	
	statements  - nyilatkozat pl.: let str = 'It is not number'; bigger code
				- deklar√°l√°s, √©rt√©kad√°s is annak sz√°m√≠t
	expressions - kifejez√©s pl.: 3+4, true && false && ... 
				- a 'It is not number' egy expressions...
				
The conditional (ternary) operator
-----------------------------------
	const age = 23;
	age >= 18 ? console.log('I like to drink wine') : 
		console.log('I like to drink water');
	(condition) ? if is true - instruction : if isn't true - instruction ;
	
	const drink = age >=18 ? 'wine' : 'water';
	console.log(`I like to drink ${drink}`);
	or
	console.log(`I like to drink ${age >=18 ? 'wine' : 'water'}`);
	//if-es statements-et nem lehetne {} k√∂z√© rakni, de ez egy expressions √≠gy ebben a form√°ban
	
	//let bill = Number(prompt("Please, give me the amount of the bill"));
	const bill = 275;
	let tip = bill>=50 && bill<=300 ? bill*0.15 : bill*0.2;
	console.log(`The bill was ${bill}, the tip was ${tip}, and the total value ${bill+tip}.`);
	
---------------------------------------------------------------------------------------------------------
										Fundamentals 2
---------------------------------------------------------------------------------------------------------

Strict mode:
-------------
	'use strict' -- that is activate the strict mode
	let hasDriversLicences = false;
	const passTest  = true;
	if (passTest) hasDriveLicences = true; //direkt van el√≠rva!! ha use.. nincs akkor nem √≠r hib√°t
	if (hasDriversLicences) console.log('I can drive :-D'); 
	//ha a 'use strict' be van kapcsolva, akkor hiba√ºzenetet ad a hasDriveLicences miatt!

	https://codeberryschool.com/forum/hu/372/mit-csinal-use-strict-javascript-ben-es-magyarazat-mogotte
	A Strict Mode az ECMAScript 5-nek egy √∫j funkci√≥ja, ami lehet≈ëv√© teszi, hogy a programodat 
	vagy a f√ºggv√©nyedet egy szigor√∫ m≈±k√∂d√©si k√∂rnyezetbe helyezd. Ez a szigor√∫ m≈±k√∂d√©si 
	k√∂rnyezet megakad√°lyoz n√©h√°ny m≈±veletet √©s t√∂bb hib√°t dob fel.
	....
	https://www.w3schools.com/js/js_strict.asp
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
	
Function:
---------
	// Simple function call
	function logger(parameter(s)){
		console.log('My name is Tom!');
	}
	// calling / running / invoking function
	logger(arguments);  // param√©ter a v√°ltoz√≥, amit majd az argument t√∂lt meg √©rt√©kkel.

	
	1.) Function declaration (Function that can be used before it's declared.)
	2.) Function expression (Essentially a function value stored in a variable.)
	3.) Arrow function (Great for a quick one-line functions. Has no this keyword..)
	Work in a similar way: input data->transform data -> output data

	1.) Function declaration
		function fruitProcessor(apples, oranges){
			//console.log(apples, oranges);
			const juice = `Juice with ${apples} apples and ${oranges} oranges.` 
			return juice;
		}
		console.log(fruitProcessor(5,0));
	
	2.) Function expression  - function value
		const calcAge = function (birthYear){
			return 2037 - birthYear;
		}
		const age = calcAge(1991);
		console.log(age); or console.log(calcAge(1991));
		
		//A k√ºl√∂nbs√©g, hogy declaration eset√©n b√°rmikor megh√≠vhat√≥, expressionn√©l el≈ëbb a fv kell
		
		const age = calcAge(1991);
		const calcAge = function (birthYear){
			return 2037 - birthYear;
		}
		//hib√°ra fog √≠gy futni : Uncaught ReferenceError
	
	3.) Arrow function
		const calcAge = birthYear => 2037 - birthYear;
		//cons fv name = paramaters => return value;
		console.log(calcAge(1991));
		
		//-------------------- Second example -----------------------
		const yearsUntilRetirement = (birthYear, firstName) => {
			const age = 2037 - birthYear;
			const retiremen = 65 - age;
			//return retiremen;
			return `${firstName} retires in ${retiremen} years`;
		}
		console.log(yearsUntilRetirement(1991, 'Johnas'));
		console.log(yearsUntilRetirement(2000, 'Bob'));
		//-----------------------------------------------------------

Array
------
	//I can 2 way declaration the array:
	const HM = ['Pisti','Jani','Nessaj','Yeahunter'];
	const HM = new Array('Pisti','Jani','Nessaj','Yeahunter');
	const HM = [];//create empty array
	
	console.log(HM[0]); //->'Pisti'
	console.log(HM.length); //return the array length
	console.log(HM[HM.length - 1]); //request the last elem
	
	HM = ['Azmo'] //illegal and it doesn't work
	
	//Add element
	HM.push('Danna'); //add to end and return to HM.length value
	HM.unshift('Danna'); // add to start
	
	//Remove element
	HM.pop(); //anti push - remove the last element return to canceld value
	HM.shift(); // anti unshift - remove the first element
	
	
	//Query of index
	HM.indexOf('Nessaj'); // 2 - '-1' if element doest find in array
	HM.includes('Nessaj'); // true - included in the array
	
	HM.push(23);
	HM.include('23'); //false
	HM.include(23); // true
	

	//2 arrays merge
	The concat() method is used to merge two or more arrays. 
	This method does not change the existing arrays, but instead returns a new array.
	const array1 = ['a', 'b', 'c'];
	const array2 = ['d', 'e', 'f'];
	const array3 = array1.concat(array2);

	console.log(array3);
	// expected output: Array ["a", "b", "c", "d", "e", "f"]
	
	MDN: M√ºveletek Array-eken: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat#

Object: (similar the Associative array in PHP)
--------
	Comparison to Array
	  const jonasArray = [
	  "Johnas",
	  "Schmedtmann",
	  2037 - 1991,
	  "teacher",
	  ["Michael", "Peter", "Steven"],
	];
	
	//jonasArray.forEach((value) => console.log(value));
	//jonasArray[4].forEach((value) => console.log(value));


	const jonasObject = {
	  firstName: "Johnas",
	  lastName: "Schmedtmann",
	  age: 2037 - 1991,
	  job: "teacher",
	  friends: ["Michael", "Peter", "Steven"],
	};

	console.log(jonasArray);
	console.log(jonasObject);

	const keyName = "Name";
	console.log(jonasObject.firstName);
	console.log(jonasObject["firstName"]);
	console.log(jonasObject["first" + keyName]); //that is expression mode
	//console.log(jonasObject.first + keyName); // it isn't work

	console.log(jonasObject["friends"][1]);
	console.log(jonasArray[4][1]);

	const query = prompt(
	  "What would you know about Johnas? (firstName, lastName,age,job,friends)"
	);
	console.log(query);
	if (jonasObject[query]) {
	  console.log(`Johnas ${query} is: ${jonasObject[query]}`);
	} else {
	  console.log("Please give me right data!");
	}
	
	//Print arrays
	jonasArray.forEach((value) => console.log(value));
	jonasArray[5].forEach((value) => console.log(value));


	jonasObject['friends'].forEach((value) => console.log(value));
	

Object method:
--------------
	const jonasData = {
		name: 'Johnas',
		birthYear: 1991,
		calcAge: function (birthYear){ // equal const calcAge = birthYear => 2037-birthYear	
			return 2037 - birthYear;
		}
	}
	
	const jonasData = {
	  name: 'Johnas',
	  birthYear: 1991,
	  job: 'teacher',
	  hasDriverLicense: true,

	  //Version 1 - here, we don't use the 'this' pointer
	  /* calcAge: function (birthYear) {
		// equal const calcAge = birthYear => 2021-birthYear;
		return 2021 - birthYear;
	  }, */

	  /* //Version 2 - here, we use the 'this' pointer
	  calcAge: function () {
		return 2021 - this.birthYear;
	  },
	 */
	  //Version 3 - we use 'this' pointer, and calc age with parameter give year
	  calcAge: function (actualYear = 2021) {
		//2021 is optional
		return actualYear - this.birthYear;

		//this.age = actualYear - this.birthYear;
		//return this.age;
	  },
	  challenge: function () {
		return `${this.name} is a ${this.calcAge(2021)}-years old ${this.job},\n\
		and he has ${this.hasDriverLicense ? 'a' : 'no'} driver's license.`;
	  },
	};

	//const calcAge = (birthYear) => 2021 - birthYear;
	//console.log(calcAge(jonasData.birthYear));

	//Version 1
	//console.log(jonasData.calcAge(jonasData.birthYear));
	//console.log(jonasData['calcAge'](jonasData.birthYear));
	//console.log(jonasData.calcAge);

	//Version 2
	//console.log(jonasData.calcAge());

	//Version 3
	console.log(jonasData.calcAge());

	//Challenge
	console.log(jonasData.challenge());
	
The for Loop
-------------

	for(let rep = 1; rep <= 10; rep++ ){
		console.log(`That is ${rep}. circle`);
	}
	
	
	//Example 1
	const jonasArray = [
		'Johnas',
		'Schmedtmann',
		2037 - 1991,
		'teacher',
		['Michael', 'Peter', 'Steven'],
	];

	//More dimension array handle
	console.log('Johnas data is: ');
	for (let i = 0; i <= jonasArray.length - 1; i++) {
	  if (Array.isArray(jonasArray[i])) {
		jonasArray[i].forEach((value) => console.log(value));
	  } else {
		console.log(jonasArray[i]);
	  }
	}
	
	//for of and for in

	const arr = ['a','b','c'];
	const str = a,b,c;
	const obj = {
		a: 'x',
		b: 'y',
		c: 'z'
	}
	
	for (let item of arr){
		console.log(item); //output: a,b,c
	}
	
	for (let char of str){	
		console.log(char); //output: a,b,c
	}
	
	for (let elem of obj){	
		console.log(elem); //output: error because obj is not iterable..
	}
	
	for (let elem in obj){	
		console.log(elem); //output: x,y,z
	}
	
	
	
While loop
-----------
	let i = 0;
	while (i <= jonasArray.length - 1) {
		console.log(i, jonasArray[i]);
		i++;
	}
	

---------------------------------------------------------------------------------------------------------
									DOM and Events Fundamentals
---------------------------------------------------------------------------------------------------------





